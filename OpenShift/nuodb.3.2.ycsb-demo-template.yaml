apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: nuodb-persisten-storage
  labels:
    template: nuodb-persisten-storage
  annotations:
    openshift.io/display-name: "NuoDB CE (Persistent)"
    description: "NuoDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://hub.docker.com/r/nuodb/nuodb-ce/ \n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing"
    iconClass: https://www.nuodb.com/sites/all/themes/nuodb/logo.svg
    tags: "database,nuodb"
    openshift.io/long-description: "This template provides a Clustered NuoDB server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service."
    openshift.io/provider-display-name: "NuoDB, Inc."
    openshift.io/documentation-url: "http://doc.nuodb.com/Latest/Default.htm"
    openshift.io/support-url: "https://support.nuodb.com/hc/en-us"
    message: "The following service(s) have been created in your project: placeholder.\n\n"
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${SECRET_NAME}
    labels:
      group: nuodb
      app: nuodb
    annotations:
      "template.openshift.io/expose-username": "{.data['database-username']}"
      "template.openshift.io/expose-password": "{.data['database-password']}"
      "template.openshift.io/expose-database-name": "{.data['database-name']}"
  stringData:
    "database-username": "${DB_USER}"
    "database-password": "${DB_PASSWORD}"
    "database-name": "${DB_NAME}"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: "Service for Admin pods."
    labels:
      group: nuodb
      app: nuodb
    name: ${ADMIN_SVC_NAME}-${NODE_REGION}
  spec:
    ports:
    - name: 8888-tcp
      port: "8888"
      protocol: TCP
      targetPort: 8888
    - name: 48004-tcp
      port: 48004
      protocol: TCP
      targetPort: 48004
    - name: 48005-tcp
      port: 48005
      protocol: TCP
      targetPort: 48005
    selector:
      app: admin-${NODE_REGION}
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
    labels:
      group: nuodb
      app: nuodb
    name: nuoadmin-dns
  spec:
    PublishNotReadyAddresses: true
    clusterIP: None
    ports:
    - name: none
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      dns: nuoadmin
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: "apps/v1beta1"
  kind: StatefulSet
  metadata:
    name: nuoadmin-${NODE_REGION}
    labels:
      group: nuodb
      app: nuodb
  spec:
    serviceName: nuoadmin-dns
    replicas: ${ADMIN_COUNT}
    selector:
      matchLabels:
        affinity: admin
        group: nuodb
    template:
      metadata:
        labels:
          dns: nuoadmin
          group: nuodb
          app: admin-${NODE_REGION}
          affinity: admin
      spec:
        nodeSelector:
          zone: ${NODE_REGION}
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: affinity
                  operator: In
                  values:
                  - admin
              topologyKey: "kubernetes.io/hostname"
        terminationGracePeriodSeconds: 15
        containers:
        - name: nuoadmin-${NODE_REGION}
          image: ${CONTAINER}
          imagePullPolicy: Always
          ports:
          - containerPort: 8888
            protocol: TCP
          - containerPort: 48004
            protocol: TCP
          - containerPort: 48005
            protocol: TCP
          env:
            - name: DNS_LOOKUP
              value: nuoadmin-dns
            - name: SUB_ID
              value: VNB2L0GZW1
            - name: API_PORT
              value: "8888"
            - name: PEER_ADDRESS
              value: ${ADMIN_SVC_NAME}-${NODE_REGION}
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: database-name
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: database-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: database-password
            - name: NODE_REGION
              value: ${NODE_REGION}
            - name: NODE_TYPE
              value: NUOADMIN
            - name: FIRST_CLUSTER_API
              value: ${FIRST_CLUSTER_API}
            - name: INSIGHTS_URL
              value: "https://insights-qa.nuodb.com/api/1"
          volumeMounts:
          - mountPath: /opt/nuodb/var/opt
            name: nuoadmin-raft-${NODE_REGION}
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 2
            failureThreshold: 30
            successThreshold: 2
            timeoutSeconds: 1
            httpGet:
              path: /api/1/peers
              port: 8888
    volumeClaimTemplates:
    - metadata:
        name: nuoadmin-raft-${NODE_REGION}
      spec:
        selector:
          app: nuodb
        labels:
          app: nuodb
        storageClassName: ${PVC_CLASS_NAME}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: ${ADMIN_PVC_SIZE}
- apiVersion: "apps/v1beta1"
  kind: StatefulSet
  metadata:
    name: sm-${NODE_REGION}
    labels:
      group: nuodb
      app: nuodb
  spec:
    serviceName: sm
    replicas: ${SM_COUNT}
    selector:
      matchLabels:
        affinity: sm
        app: sm-${NODE_REGION}
        group: nuodb
    template:
      metadata:
        labels:
          group: nuodb
          app: sm-${NODE_REGION}
          affinity: sm
      spec:
        nodeSelector:
          zone: ${NODE_REGION}
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: affinity
                  operator: In
                  values:
                  - sm
              topologyKey: "kubernetes.io/hostname"
        terminationGracePeriodSeconds: 15
        containers:
        - name: sm-${NODE_REGION}
          image: ${CONTAINER}
          imagePullPolicy: Always
          env:
            - name: API_PORT
              value: "8888"
            - name: SUB_ID
              value: VNB2L0GZW1
            - name: PEER_ADDRESS
              value: ${ADMIN_SVC_NAME}-${NODE_REGION}
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: database-name
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: database-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_NAME}
                  key: database-password
            - name: NODE_REGION
              value: ${NODE_REGION}
            - name: NODE_TYPE
              value: SM
            - name: ADMIN_NUM
              value: ${ADMIN_COUNT}
            - name: INSIGHTS_URL
              value: "https://insights-qa.nuodb.com/api/1"
          volumeMounts:
          - mountPath: /archive
            name: sm-archives-${NODE_REGION}
          - mountPath: /journal
            name: sm-journal-${NODE_REGION}
    volumeClaimTemplates:
    - metadata:
        name: sm-archives-${NODE_REGION}
      spec:
        labels:
          group: nuodb
          app: nuodb
        storageClassName: ${PVC_CLASS_NAME}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: ${SM_PVC_SIZE}
    - metadata:
        name: sm-journal-${NODE_REGION}
      spec:
        labels:
          group: nuodb
          app: nuodb
        storageClassName: ${PVC_CLASS_NAME}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: ${SM_PVC_SIZE}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      group: nuodb
      app: nuodb
      deploymentconfig: te-${NODE_REGION}
    name: te-${NODE_REGION}
  spec:
    selector:
      matchLabels:
        affinity: te
        app: te-${NODE_REGION}
        deploymentconfig: te-${NODE_REGION}
    replicas: ${TE_COUNT}
    selector:
      app: te-${NODE_REGION}
      deploymentconfig: te-${NODE_REGION}
      affinity: te
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: te-${NODE_REGION}
          deploymentconfig: te-${NODE_REGION}
          affinity: te
      spec:
        nodeSelector:
          zone: ${NODE_REGION}
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: affinity
                    operator: In
                    values:
                    - te
                topologyKey: "kubernetes.io/hostname"
        containers:
        - env:
          - name: API_PORT
            value: "8888"
          - name: SUB_ID
            value: VNB2L0GZW1
          - name: PEER_ADDRESS
            value: ${ADMIN_SVC_NAME}-${NODE_REGION}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: ${SECRET_NAME}
                key: database-name
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: ${SECRET_NAME}
                key: database-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${SECRET_NAME}
                key: database-password
          - name: NODE_REGION
            value: ${NODE_REGION}
          - name: NODE_TYPE
            value: TE
          - name: INSIGHTS_URL
            value: "https://insights-qa.nuodb.com/api/1"
          image: ${CONTAINER}
          imagePullPolicy: IfNotPresent
          name: te-${NODE_REGION}
          ports:
          - containerPort: 48004
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /archive
            name: admin-volume-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 15
        volumes:
        - emptyDir: {}
          name: admin-volume-1
parameters:
  - name: NAMESPACE
    displayName: Namespace
    description: "The OpenShift Namespace where the ImageStream resides"
    value: openshift
  - name: SECRET_NAME
    displayName: Secret Name
    description: "Name of Secret to store database username and password"
    required: true
    value: nuodb-secret
  - name: NODE_REGION
    displayName: Deployment Zone
    description: "Deploy NuoDB to labeled OpenShift Nodes"
    required: true
    value: default
  - name: FIRST_CLUSTER_API
    displayName: Existing NuoDB Admin Service Address
    description: "Join an existing NuoDB cluster"
    value:
  - name: DB_NAME
    displayName: Database Name
    description: "NuoDB database name to create"
    required: true
    value: hockey
  - name: DB_USER
    displayName: Database Username
    description: "NuoDB connection username"
    required: true
    value: goalie
  - name: DB_PASSWORD
    displayName: Database User Password
    description: "Database user password"
    required: true
    value: goal!
  - name: ADMIN_SVC_NAME
    displayName: NuoDB Admin Service Name
    description: "Service Name to Connect to NuoAdmin. Node region parameter will be appended to string"
    required: true
    value: nuodb-svc
  - name: SM_PVC_SIZE
    diplayName: SM Volume Size (GB)
    description: "PVC Size for Storage Manager in GB"
    required: true
    value: 20G
  - name: ADMIN_PVC_SIZE
    diplayName: Admin Raft Log Volume Size (GB)
    description: "PVC Size for Admin in GB"
    required: true
    value: 5G
  - name: ADMIN_COUNT
    displayName: Number of NuoADMIN nodes to Launch
    description: "Start NuoDB with a specific number of NuoADMINs"
    required: true
    value: "3"
  - name: SM_COUNT
    displayName: Number of Storage Managers nodes to Launch
    description: "Start NuoDB with a specific number of SMs"
    required: true
    value: "2"
  - name: TE_COUNT
    displayName: Number of Transaction Engines nodes to Launch
    description: "Start NuoDB with a specific number of TEs"
    required: true
    value: "2"
  - name: PVC_CLASS_NAME
    displayName: Persistent Storage Class Name
    desicrption: "Name of Storage Class for persistent storage"
    required: true
    value: openebs-percona
  - name: CONTAINER
    displayName: Container Registry
    description: "Registry to pull NuoDB from"
    required: true
    value: "docker.io/nuodb/nuodb-ee:3.3.0-5245.1"