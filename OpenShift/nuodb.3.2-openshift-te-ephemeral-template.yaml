apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: nuodb-te-ephemeral
  labels:
    template: nuodb-te-ephemeral
  annotations:
    openshift.io/display-name: "NuoDB TE (Ephemeral)"
    description: "NuoDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://hub.docker.com/r/nuodb/nuodb-ce/ \n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing"
    iconClass: https://www.nuodb.com/sites/all/themes/nuodb/logo.svg
    tags: "database,nuodb"
    openshift.io/long-description: "This template provides a Clustered NuoDB server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service."
    openshift.io/provider-display-name: "NuoDB, Inc."
    openshift.io/documentation-url: "http://doc.nuodb.com/Latest/Default.htm"
    openshift.io/support-url: "https://support.nuodb.com/hc/en-us"
    message: "The following service(s) have been created in your project: placeholder.\n\n"
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      group: nuodb
      app: nuodb
      deploymentconfig: te-${NODE_REGION}
    name: te-${NODE_REGION}-${UID}
  spec:
    selector:
      matchLabels:
        affinity: te
        app: te-${NODE_REGION}
        deploymentconfig: te-${NODE_REGION}
    replicas: ${TE_COUNT}
    selector:
      app: te-${NODE_REGION}
      deploymentconfig: te-${NODE_REGION}
      affinity: te
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: te-${NODE_REGION}
          deploymentconfig: te-${NODE_REGION}
          affinity: te
      spec:
        nodeSelector:
          zone: ${NODE_REGION}
          nodeType: compute
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: affinity
                    operator: In
                    values:
                    - te
                topologyKey: "kubernetes.io/hostname"
        containers:
        - env:
          - name: API_PORT
            value: "8888"
          - name: SUB_ID
            value: ${SUB_ID}
          - name: PEER_ADDRESS
            value: ${ADMIN_SVC_NAME}-${NODE_REGION}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: ${SECRET_NAME}
                key: database-name
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: ${SECRET_NAME}
                key: database-username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${SECRET_NAME}
                key: database-password
          - name: NODE_REGION
            value: ${NODE_REGION}
          - name: TE_STARTUP_OPTIONS
            value: ${TE_STARTUP_OPTIONS}
          - name: TE_TAG_KEY_VALUE
            value: ${TE_TAG_KEY_VALUE}
          - name: NODE_TYPE
            value: TE
          - name: INSIGHTS_URL
            value: "https://insights-qa.nuodb.com/api/1"
          image: ${CONTAINER}
          imagePullPolicy: IfNotPresent
          name: te-${NODE_REGION}
          ports:
          - containerPort: 48004
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /archive
            name: te-volume-1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 15
        volumes:
        - emptyDir: {}
          name: te-volume-1
parameters:
  - name: SECRET_NAME
    displayName: Secret Name
    description: "Name of Secret to store database username and password"
    required: true
    value: nuodb-secret
  - name: NODE_REGION
    displayName: Deployment Zone
    description: "Deploy NuoDB to labeled OpenShift Nodes"
    required: true
    value:
  - name: ADMIN_SVC_NAME
    displayName: NuoDB Admin Service Name
    description: "Service Name to Connect to NuoAdmin. Node region parameter will be appended to string"
    required: true
    value: nuodb-svc
  - name: SUB_ID
    displayName: Insights Subscriber ID
    description: "Insights Subscriber ID"
    value: VNB2L0GZW1
  - name: TE_COUNT
    displayName: Number of Transaction Engines nodes to Launch
    description: "Start NuoDB with a specific number of TEs"
    required: true
    value: "2"
  - name: TE_STARTUP_OPTIONS
    displayName: TE Startup options
    description: "Default startup options for all TEs"
    required: false
    value: "mem 4g"
  - name: TE_TAG_KEY_VALUE
    displayName: Name and Pattern for the label
    description: "Label, e.g. 'tx oltp'"
    required: false
    value: "tx oltp"
  - name: CONTAINER
    displayName: Container Registry
    description: "Registry to pull NuoDB from"
    required: true
    value: "docker.io/nuodb/nuodb-ee:3.3.0-1548"
  - name: UID
    description: "Generate UID for deployment names"
    generate: expression
    from: "[a-z]{5}"